image:
  registry: docker.io
  repository: yourls
  # tag: {{ .Chart.AppVersion }}
  pullPolicy: IfNotPresent
  # pullSecrets:
  #   - myRegistrKeySecretName

yourls:
  site: http://yourls
  username: user
  # password:
  # passwordExistingSecret:
  tablePrefix: yourls_

# extraEnv:
# - name: SECRET_TO_SAVE
#   value: secret_value
# - name: AWS_ACCESS_KEY_ID
#   valueFrom:
#     secretKeyRef:
#       name: existing-secret
#       key: access-key-id
extraEnv: []

replicaCount: 1

db:
  host: localhost
  port: 3306
  user: yourls
  password: ""
  database: yourls
  # existingSecret:

##
## MySQL chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/mysql/values.yaml
##
mysql:
  ## Whether to deploy a mysql server to satisfy the applications database requirements.
  ## To use an external database set this to false and configure the db parameters
  ##
  enabled: true
  ## MySQL architecture. Allowed values: standalone or replication
  ##
  architecture: standalone
  ## MySQL Authentication parameters
  ##
  auth:
    ## MySQL root password
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## MySQL custom user and database
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-on-first-run
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    database: yourls
    username: yourls
    password: ""
  primary:
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## mysql data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessModes:
        - ReadWriteOnce
      size: 8Gi

service:
  type: LoadBalancer
  port: 80
  httpsPort: 443
  nodePorts:
    http: ""
    https: ""
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  annotations: {}

## Allow health checks to be pointed at the https port
healthcheckHttps: false

## Disables readiness probe
disableAdminPanelReadinessProbe: false

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
  - name: yourls.local
    path: /
    pathType: Prefix

    # Set this to true in order to enable TLS on the ingress record
    tls: false

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: yourls.local-tls

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: yourls.local-tls
  #   key:
  #   certificate:

persistence:
  enabled: true
  # storageClass: "-"
  # existingClaim: your-claim
  accessMode: ReadWriteOnce
  size: 10Gi

# volumes:
#  - hostPath:
#      path: /etc/passwd
#    name: passwd
# volumeMounts:
#   - name: passwd
#     mountPath: /etc/passwd
#     readOnly: true

resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## K8s Security Context for WordPress pods
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001

## Prometheus Exporter / Metrics
##
metrics:
  enabled: false
  image:
    registry: docker.io
    repository: lusotycoon/apache-exporter
    tag: v0.10.1
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName
  ## Metrics exporter pod Annotation and Labels
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9117"
    ## Metrics exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
  # resources: {}

## Add init containers to the pod.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## Example:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'copy plugins from git and push to /var/www/user. Should work with volumeMounts and volumes']
##
initContainers: {}
